GameStart
════════════════════════════════════════════════════════════════════════

enter
────────────────────────────────────────────────────────────────────────

set_background(BorderBgColor)
set_random_seed()

const boardWidth = BoardWidth
const seed = local_time().millisecond

remove_all(Boards)

push(Boards, Board(boardWidth, xy(16, 28), CursorsPerBoard, 0, seed))

if g_gameMode != GameMode.SOLO:
    push(Boards, Board(boardWidth, xy(384 - 16 - boardWidth * 16, 28),
            CursorsPerBoard, 1, seed))

    Boards[0].otherBoard = Boards[1]
    Boards[1].otherBoard = Boards[0]


for board in Boards:
    BoardFill(board, 5)

// testing
// Boards[1].cursors[1].joyIdx = 1
// Boards[0].cursors[1].joyIdx = 2

ClockReset(g_clock)


let musicChoices = []
if g_lastWinSide == nil:
    for i < size(GameConfigs[g_gameMode].cursors):
        push(musicChoices, SelectedCharacters[i])
else:
    const count = if g_gameMode == GameMode.DOUBLES then 2 else 1
    if g_lastWinSide == 0:
        for i < count:
            push(musicChoices, SelectedCharacters[i])
    else:
        const offset = if g_gameMode == GameMode.DOUBLES then 2 else 1
        for i < count:
            push(musicChoices, SelectedCharacters[i + offset])

//CurrentSongIdx = SelectedCharacters[0]
CurrentSongIdx = random_value(musicChoices)


frame
────────────────────────────────────────────────────────────────────────

if not DO_COUNT_IN:
    set_mode(Play)

GlobalsStep()


DashboardDraw()

for board in Boards:
    BoardStep(board)
    BoardDraw(board)

if mode_frames mod 60 == 0:
    play_sound(cursor_sound)

if mode_frames >= 180:
    set_mode(Play)
else:
    const alpha = 1.0 - ((mode_frames mod 60) / 59.0)
    const spr = countInNumbers_sprite[floor(mode_frames / 60)][0]
    for board in Boards:
        draw_sprite(spr, BoardGetCenter(board), 0, nil, alpha)

